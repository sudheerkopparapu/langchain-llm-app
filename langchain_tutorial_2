from langchain.llms import OpenAI
from langchain.prompts import PromptTemplate
from langchain.chains import LLMChain, SimpleSequentialChain, SequentialChain
from langchain.agents import AgentType, initialize_agent, load_tools
from langchain.memory import ConversationBufferMemory

from dotenv import load_dotenv
load_dotenv()

def practice():
    place = input('Enter your desired place for which capital to be known?')
    llm = OpenAI(temperature = 0.3)

    prompt = PromptTemplate.from_template("What is the capital of {place}?")

    chain = LLMChain(llm = llm , prompt = prompt)
    output = chain.run(place)
    print(output)

# LLM to get name of an e-commerce store
prompt = PromptTemplate.from_template("What is the name of the ecommerce store that sells {product}?")
llm = OpenAI(temperature = 0.3)
chain1 = LLMChain(llm = llm, prompt = prompt)
# product = "iPhone"
# output = chain.run(product)
# print(output)

# LLM to get name of comma separated names of products from an ecommerce store name
prompt = PromptTemplate.from_template("What are the names of the products at {store}?")
llm = OpenAI(temperature = 0.3)
chain2 = LLMChain(llm = llm, prompt = prompt)

# Create an overall chain from a simple sequential chain
chain = SimpleSequentialChain(chains = [chain1, chain2], verbose = True)
# output = chain.run('candles')
# print(output)




# An example of a SEQUENTIAL CHAIN
# this is an LLM to write a synopsis for the play
llm = OpenAI(temperature = 0.7)
template = """You are a playwright. Given the title of the play and era it is set in, it is your job to write a synopsis for that title.
Title: {title}
Era: {era}
Playwright: This is a synopsis for the above play:"""
prompt_template = PromptTemplate(input_variables=['title', 'era'], template = template)
synopsis_chain = LLMChain(llm = llm, prompt = prompt_template, output_key="synopsis")

# this is an LLM to write a review given the synopsis
llm = OpenAI(temperature = 0.7)
template = """You are a play critic from the New York Times. Given the synopsis, it is your job to write a review for that play

play synopsis: {synopsis}
Review from a New York times play critic of the above play:"""
prompt_template = PromptTemplate(input_variables=['synopsis'], template = template)
review_chain = LLMChain(llm=llm, prompt = prompt_template, output_key = 'review')

# This is the overall chain where we run two chains in sequence

overall_chain = SequentialChain(chains = [synopsis_chain, review_chain], input_variables = ['era','title'],
                                # Here we run multiple variables
                                output_variables=["synopsis", "review"],
                                verbose = True)
#response = overall_chain.run({"era": "Reenaissance", "title": "The Tempest"})  # run works only with one oputput key

# print(overall_chain({"era": "Reenaissance", "title": "The Tempest"}))



# AGENT Demo
llm = OpenAI(temperature = 0.7)
tools = load_tools(["wikipedia", "llm-math"], llm = llm)
agent = initialize_agent(tools, llm, agent = AgentType.ZERO_SHOT_REACT_DESCRIPTION, verbose = True)
# response = agent.run("Who were the  contestants of Bigboss season 6 especially in telugu language?") 
# print(response)



# MEMORY in LLMs
llm = OpenAI(temperature = 0.3)
prompt = PromptTemplate.from_template("What is the name of the ecommerce store that sells {item}?")
chain = LLMChain(llm = llm, prompt = prompt ,
                  memory = ConversationBufferMemory())
output = chain.run('fruits')
output = chain.run('toys')
output = chain.run('laptops')
output = chain.run('fruits')
print(chain.memory.buffer)
print(output)




